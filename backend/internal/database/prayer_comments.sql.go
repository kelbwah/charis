// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: prayer_comments.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPrayerComment = `-- name: CreatePrayerComment :one
INSERT INTO prayer_comments (id, prayer_id, comment, commenter_id, is_anonymous)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, prayer_id, comment, commenter_id, is_anonymous, created_at, updated_at
`

type CreatePrayerCommentParams struct {
	ID          uuid.UUID
	PrayerID    uuid.UUID
	Comment     string
	CommenterID uuid.UUID
	IsAnonymous bool
}

func (q *Queries) CreatePrayerComment(ctx context.Context, arg CreatePrayerCommentParams) (PrayerComment, error) {
	row := q.db.QueryRowContext(ctx, createPrayerComment,
		arg.ID,
		arg.PrayerID,
		arg.Comment,
		arg.CommenterID,
		arg.IsAnonymous,
	)
	var i PrayerComment
	err := row.Scan(
		&i.ID,
		&i.PrayerID,
		&i.Comment,
		&i.CommenterID,
		&i.IsAnonymous,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePrayerComment = `-- name: DeletePrayerComment :exec
DELETE FROM prayer_comments
WHERE id = $1
`

func (q *Queries) DeletePrayerComment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePrayerComment, id)
	return err
}

const getPrayerCommentByID = `-- name: GetPrayerCommentByID :one
SELECT id, prayer_id, comment, commenter_id, is_anonymous, created_at, updated_at FROM prayer_comments
WHERE id = $1
`

func (q *Queries) GetPrayerCommentByID(ctx context.Context, id uuid.UUID) (PrayerComment, error) {
	row := q.db.QueryRowContext(ctx, getPrayerCommentByID, id)
	var i PrayerComment
	err := row.Scan(
		&i.ID,
		&i.PrayerID,
		&i.Comment,
		&i.CommenterID,
		&i.IsAnonymous,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrayerCommentsByPrayer = `-- name: GetPrayerCommentsByPrayer :many
SELECT id, prayer_id, comment, commenter_id, is_anonymous, created_at, updated_at FROM prayer_comments
WHERE prayer_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetPrayerCommentsByPrayer(ctx context.Context, prayerID uuid.UUID) ([]PrayerComment, error) {
	rows, err := q.db.QueryContext(ctx, getPrayerCommentsByPrayer, prayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrayerComment
	for rows.Next() {
		var i PrayerComment
		if err := rows.Scan(
			&i.ID,
			&i.PrayerID,
			&i.Comment,
			&i.CommenterID,
			&i.IsAnonymous,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrayerComment = `-- name: UpdatePrayerComment :one
UPDATE prayer_comments
SET comment = COALESCE($2, comment),
    updated_at = NOW()
WHERE id = $1
RETURNING id, prayer_id, comment, commenter_id, is_anonymous, created_at, updated_at
`

type UpdatePrayerCommentParams struct {
	ID      uuid.UUID
	Comment string
}

func (q *Queries) UpdatePrayerComment(ctx context.Context, arg UpdatePrayerCommentParams) (PrayerComment, error) {
	row := q.db.QueryRowContext(ctx, updatePrayerComment, arg.ID, arg.Comment)
	var i PrayerComment
	err := row.Scan(
		&i.ID,
		&i.PrayerID,
		&i.Comment,
		&i.CommenterID,
		&i.IsAnonymous,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
