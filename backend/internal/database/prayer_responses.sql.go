// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: prayer_responses.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const countPrayerResponsesByPrayer = `-- name: CountPrayerResponsesByPrayer :one
SELECT 
    COUNT(*) FILTER (WHERE status = 'will_pray') AS will_pray_count,
    COUNT(*) FILTER (WHERE status = 'prayed_for') AS prayed_for_count
FROM prayer_responses
WHERE prayer_id = $1
`

type CountPrayerResponsesByPrayerRow struct {
	WillPrayCount  int64
	PrayedForCount int64
}

func (q *Queries) CountPrayerResponsesByPrayer(ctx context.Context, prayerID uuid.UUID) (CountPrayerResponsesByPrayerRow, error) {
	row := q.db.QueryRowContext(ctx, countPrayerResponsesByPrayer, prayerID)
	var i CountPrayerResponsesByPrayerRow
	err := row.Scan(&i.WillPrayCount, &i.PrayedForCount)
	return i, err
}

const createPrayerResponse = `-- name: CreatePrayerResponse :one
INSERT INTO prayer_responses (id, prayer_id, user_id, status)
VALUES ($1, $2, $3, $4)
RETURNING id, prayer_id, user_id, status, hidden, created_at, updated_at
`

type CreatePrayerResponseParams struct {
	ID       uuid.UUID
	PrayerID uuid.UUID
	UserID   uuid.UUID
	Status   string
}

func (q *Queries) CreatePrayerResponse(ctx context.Context, arg CreatePrayerResponseParams) (PrayerResponse, error) {
	row := q.db.QueryRowContext(ctx, createPrayerResponse,
		arg.ID,
		arg.PrayerID,
		arg.UserID,
		arg.Status,
	)
	var i PrayerResponse
	err := row.Scan(
		&i.ID,
		&i.PrayerID,
		&i.UserID,
		&i.Status,
		&i.Hidden,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrayerResponseByUserAndPrayer = `-- name: GetPrayerResponseByUserAndPrayer :one
SELECT id, prayer_id, user_id, status, hidden, created_at, updated_at FROM prayer_responses
WHERE prayer_id = $1 AND user_id = $2
`

type GetPrayerResponseByUserAndPrayerParams struct {
	PrayerID uuid.UUID
	UserID   uuid.UUID
}

func (q *Queries) GetPrayerResponseByUserAndPrayer(ctx context.Context, arg GetPrayerResponseByUserAndPrayerParams) (PrayerResponse, error) {
	row := q.db.QueryRowContext(ctx, getPrayerResponseByUserAndPrayer, arg.PrayerID, arg.UserID)
	var i PrayerResponse
	err := row.Scan(
		&i.ID,
		&i.PrayerID,
		&i.UserID,
		&i.Status,
		&i.Hidden,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrayerResponsesByPrayer = `-- name: GetPrayerResponsesByPrayer :many
SELECT id, prayer_id, user_id, status, hidden, created_at, updated_at FROM prayer_responses
WHERE prayer_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetPrayerResponsesByPrayer(ctx context.Context, prayerID uuid.UUID) ([]PrayerResponse, error) {
	rows, err := q.db.QueryContext(ctx, getPrayerResponsesByPrayer, prayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrayerResponse
	for rows.Next() {
		var i PrayerResponse
		if err := rows.Scan(
			&i.ID,
			&i.PrayerID,
			&i.UserID,
			&i.Status,
			&i.Hidden,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrayerResponsesByUser = `-- name: GetPrayerResponsesByUser :many
SELECT id, prayer_id, user_id, status, hidden, created_at, updated_at FROM prayer_responses
WHERE user_id = $1 AND hidden = false
ORDER BY created_at DESC
`

func (q *Queries) GetPrayerResponsesByUser(ctx context.Context, userID uuid.UUID) ([]PrayerResponse, error) {
	rows, err := q.db.QueryContext(ctx, getPrayerResponsesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PrayerResponse
	for rows.Next() {
		var i PrayerResponse
		if err := rows.Scan(
			&i.ID,
			&i.PrayerID,
			&i.UserID,
			&i.Status,
			&i.Hidden,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWillPrayForResponsesByUser = `-- name: GetWillPrayForResponsesByUser :many
SELECT a.id, prayer_title, prayer_request, category, related_scripture, a.created_at, a.updated_at, is_anonymous, a.user_id, b.id, prayer_id, b.user_id, status, hidden, b.created_at, b.updated_at FROM prayers a 
LEFT JOIN prayer_responses b 
ON a.id = b.prayer_id
WHERE b.user_id = $1
AND b.status IN ('will_pray')
AND b.hidden = false
ORDER BY a.created_at DESC
`

type GetWillPrayForResponsesByUserRow struct {
	ID               uuid.UUID
	PrayerTitle      string
	PrayerRequest    string
	Category         string
	RelatedScripture sql.NullString
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IsAnonymous      bool
	UserID           uuid.UUID
	ID_2             uuid.NullUUID
	PrayerID         uuid.NullUUID
	UserID_2         uuid.NullUUID
	Status           sql.NullString
	Hidden           sql.NullBool
	CreatedAt_2      sql.NullTime
	UpdatedAt_2      sql.NullTime
}

func (q *Queries) GetWillPrayForResponsesByUser(ctx context.Context, userID uuid.UUID) ([]GetWillPrayForResponsesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getWillPrayForResponsesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWillPrayForResponsesByUserRow
	for rows.Next() {
		var i GetWillPrayForResponsesByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.PrayerTitle,
			&i.PrayerRequest,
			&i.Category,
			&i.RelatedScripture,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAnonymous,
			&i.UserID,
			&i.ID_2,
			&i.PrayerID,
			&i.UserID_2,
			&i.Status,
			&i.Hidden,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hidePrayerResponse = `-- name: HidePrayerResponse :one
UPDATE prayer_responses
SET hidden = true,
    updated_at = NOW()
WHERE id = $1
RETURNING id, prayer_id, user_id, status, hidden, created_at, updated_at
`

func (q *Queries) HidePrayerResponse(ctx context.Context, id uuid.UUID) (PrayerResponse, error) {
	row := q.db.QueryRowContext(ctx, hidePrayerResponse, id)
	var i PrayerResponse
	err := row.Scan(
		&i.ID,
		&i.PrayerID,
		&i.UserID,
		&i.Status,
		&i.Hidden,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePrayerResponseStatus = `-- name: UpdatePrayerResponseStatus :exec
UPDATE prayer_responses
SET status = COALESCE($3, status),
    updated_at = NOW()
WHERE prayer_id = $1 and user_id = $2
`

type UpdatePrayerResponseStatusParams struct {
	PrayerID uuid.UUID
	UserID   uuid.UUID
	Status   string
}

func (q *Queries) UpdatePrayerResponseStatus(ctx context.Context, arg UpdatePrayerResponseStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePrayerResponseStatus, arg.PrayerID, arg.UserID, arg.Status)
	return err
}
