// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, clerk_id, avatar_src, email, username)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, clerk_id, email, username, avatar_src, created_at, updated_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	ClerkID   string
	AvatarSrc string
	Email     string
	Username  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.ClerkID,
		arg.AvatarSrc,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Username,
		&i.AvatarSrc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserByClerkID = `-- name: DeleteUserByClerkID :exec
DELETE FROM users
WHERE clerk_id = $1
`

func (q *Queries) DeleteUserByClerkID(ctx context.Context, clerkID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByClerkID, clerkID)
	return err
}

const getUserByClerkID = `-- name: GetUserByClerkID :one
SELECT id, clerk_id, email, username, avatar_src, created_at, updated_at FROM users
WHERE clerk_id = $1
`

func (q *Queries) GetUserByClerkID(ctx context.Context, clerkID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByClerkID, clerkID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Username,
		&i.AvatarSrc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, clerk_id, email, username, avatar_src, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Username,
		&i.AvatarSrc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, clerk_id, email, username, avatar_src, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ClerkID,
		&i.Email,
		&i.Username,
		&i.AvatarSrc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, clerk_id, email, username, avatar_src, created_at, updated_at FROM users
ORDER BY created_at DESC
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ClerkID,
			&i.Email,
			&i.Username,
			&i.AvatarSrc,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET avatar_src = COALESCE($2, avatar_src),
    email = COALESCE($3, email),
    username = COALESCE($4, username),
    updated_at = NOW()
WHERE clerk_id = $1
`

type UpdateUserParams struct {
	ClerkID   string
	AvatarSrc string
	Email     string
	Username  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ClerkID,
		arg.AvatarSrc,
		arg.Email,
		arg.Username,
	)
	return err
}
