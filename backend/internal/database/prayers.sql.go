// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: prayers.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPrayer = `-- name: CreatePrayer :one
INSERT INTO prayers (id, prayer_title, prayer_request, category, related_scripture, is_anonymous, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, prayer_title, prayer_request, category, related_scripture, created_at, updated_at, is_anonymous, user_id
`

type CreatePrayerParams struct {
	ID               uuid.UUID
	PrayerTitle      string
	PrayerRequest    string
	Category         string
	RelatedScripture sql.NullString
	IsAnonymous      bool
	UserID           uuid.UUID
}

func (q *Queries) CreatePrayer(ctx context.Context, arg CreatePrayerParams) (Prayer, error) {
	row := q.db.QueryRowContext(ctx, createPrayer,
		arg.ID,
		arg.PrayerTitle,
		arg.PrayerRequest,
		arg.Category,
		arg.RelatedScripture,
		arg.IsAnonymous,
		arg.UserID,
	)
	var i Prayer
	err := row.Scan(
		&i.ID,
		&i.PrayerTitle,
		&i.PrayerRequest,
		&i.Category,
		&i.RelatedScripture,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAnonymous,
		&i.UserID,
	)
	return i, err
}

const deletePrayer = `-- name: DeletePrayer :exec
DELETE FROM prayers
WHERE id = $1 AND user_id = $2
`

type DeletePrayerParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeletePrayer(ctx context.Context, arg DeletePrayerParams) error {
	_, err := q.db.ExecContext(ctx, deletePrayer, arg.ID, arg.UserID)
	return err
}

const getAllPrayers = `-- name: GetAllPrayers :many
SELECT a.id, prayer_title, prayer_request, category, related_scripture, a.created_at, a.updated_at, is_anonymous, a.user_id, b.id, prayer_id, b.user_id, status, hidden, b.created_at, b.updated_at FROM prayers a
LEFT JOIN prayer_responses b 
ON a.id = b.prayer_id AND b.user_id = $1
WHERE a.user_id != $1
    AND b.id IS NULL
ORDER BY a.created_at DESC
`

type GetAllPrayersRow struct {
	ID               uuid.UUID
	PrayerTitle      string
	PrayerRequest    string
	Category         string
	RelatedScripture sql.NullString
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IsAnonymous      bool
	UserID           uuid.UUID
	ID_2             uuid.NullUUID
	PrayerID         uuid.NullUUID
	UserID_2         uuid.NullUUID
	Status           sql.NullString
	Hidden           sql.NullBool
	CreatedAt_2      sql.NullTime
	UpdatedAt_2      sql.NullTime
}

func (q *Queries) GetAllPrayers(ctx context.Context, userID uuid.UUID) ([]GetAllPrayersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPrayers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPrayersRow
	for rows.Next() {
		var i GetAllPrayersRow
		if err := rows.Scan(
			&i.ID,
			&i.PrayerTitle,
			&i.PrayerRequest,
			&i.Category,
			&i.RelatedScripture,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAnonymous,
			&i.UserID,
			&i.ID_2,
			&i.PrayerID,
			&i.UserID_2,
			&i.Status,
			&i.Hidden,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPrayersPaginatedNewest = `-- name: GetAllPrayersPaginatedNewest :many
SELECT
    a.id,
    a.prayer_title,
    a.prayer_request,
    a.category,
    a.related_scripture,
    a.created_at,
    a.updated_at,
    a.is_anonymous,
    a.user_id
FROM prayers a
LEFT JOIN prayer_responses b 
  ON a.id = b.prayer_id AND b.user_id = $1
WHERE a.user_id != $1 
  AND b.id IS NULL
  AND ($2::boolean OR a.is_anonymous = false)
  AND (COALESCE($3::text, '') = '' OR a.category ILIKE $3::text)
  AND a.created_at < $4::timestamptz
ORDER BY a.created_at DESC
LIMIT $5
`

type GetAllPrayersPaginatedNewestParams struct {
	UserID  uuid.UUID
	Column2 bool
	Column3 string
	Column4 time.Time
	Limit   int32
}

func (q *Queries) GetAllPrayersPaginatedNewest(ctx context.Context, arg GetAllPrayersPaginatedNewestParams) ([]Prayer, error) {
	rows, err := q.db.QueryContext(ctx, getAllPrayersPaginatedNewest,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prayer
	for rows.Next() {
		var i Prayer
		if err := rows.Scan(
			&i.ID,
			&i.PrayerTitle,
			&i.PrayerRequest,
			&i.Category,
			&i.RelatedScripture,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAnonymous,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPrayersPaginatedOldest = `-- name: GetAllPrayersPaginatedOldest :many
SELECT 
    a.id,
    a.prayer_title,
    a.prayer_request,
    a.category,
    a.related_scripture,
    a.created_at,
    a.updated_at,
    a.is_anonymous,
    a.user_id
FROM prayers a
LEFT JOIN prayer_responses b 
  ON a.id = b.prayer_id AND b.user_id = $1
WHERE a.user_id != $1
  AND b.id IS NULL
  AND ($2::boolean OR a.is_anonymous = false)
  AND (COALESCE($3::text, '') = '' OR a.category ILIKE $3::text)
  AND a.created_at > $4::timestamptz
ORDER BY a.created_at ASC
LIMIT $5
`

type GetAllPrayersPaginatedOldestParams struct {
	UserID  uuid.UUID
	Column2 bool
	Column3 string
	Column4 time.Time
	Limit   int32
}

func (q *Queries) GetAllPrayersPaginatedOldest(ctx context.Context, arg GetAllPrayersPaginatedOldestParams) ([]Prayer, error) {
	rows, err := q.db.QueryContext(ctx, getAllPrayersPaginatedOldest,
		arg.UserID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prayer
	for rows.Next() {
		var i Prayer
		if err := rows.Scan(
			&i.ID,
			&i.PrayerTitle,
			&i.PrayerRequest,
			&i.Category,
			&i.RelatedScripture,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAnonymous,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPrayersWithFilter = `-- name: GetAllPrayersWithFilter :many
SELECT a.id, prayer_title, prayer_request, category, related_scripture, a.created_at, a.updated_at, is_anonymous, a.user_id, b.id, prayer_id, b.user_id, status, hidden, b.created_at, b.updated_at FROM prayers a
LEFT JOIN prayer_responses b 
ON a.id = b.prayer_id AND b.user_id = $1
WHERE a.user_id != $1 
    AND a.category ILIKE $2
    AND b.id IS NULL
ORDER BY a.created_at DESC
`

type GetAllPrayersWithFilterParams struct {
	UserID   uuid.UUID
	Category string
}

type GetAllPrayersWithFilterRow struct {
	ID               uuid.UUID
	PrayerTitle      string
	PrayerRequest    string
	Category         string
	RelatedScripture sql.NullString
	CreatedAt        time.Time
	UpdatedAt        time.Time
	IsAnonymous      bool
	UserID           uuid.UUID
	ID_2             uuid.NullUUID
	PrayerID         uuid.NullUUID
	UserID_2         uuid.NullUUID
	Status           sql.NullString
	Hidden           sql.NullBool
	CreatedAt_2      sql.NullTime
	UpdatedAt_2      sql.NullTime
}

func (q *Queries) GetAllPrayersWithFilter(ctx context.Context, arg GetAllPrayersWithFilterParams) ([]GetAllPrayersWithFilterRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPrayersWithFilter, arg.UserID, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPrayersWithFilterRow
	for rows.Next() {
		var i GetAllPrayersWithFilterRow
		if err := rows.Scan(
			&i.ID,
			&i.PrayerTitle,
			&i.PrayerRequest,
			&i.Category,
			&i.RelatedScripture,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAnonymous,
			&i.UserID,
			&i.ID_2,
			&i.PrayerID,
			&i.UserID_2,
			&i.Status,
			&i.Hidden,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrayerByID = `-- name: GetPrayerByID :one
SELECT id, prayer_title, prayer_request, category, related_scripture, created_at, updated_at, is_anonymous, user_id FROM prayers
WHERE id = $1
`

func (q *Queries) GetPrayerByID(ctx context.Context, id uuid.UUID) (Prayer, error) {
	row := q.db.QueryRowContext(ctx, getPrayerByID, id)
	var i Prayer
	err := row.Scan(
		&i.ID,
		&i.PrayerTitle,
		&i.PrayerRequest,
		&i.Category,
		&i.RelatedScripture,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAnonymous,
		&i.UserID,
	)
	return i, err
}

const getPrayerByIdAndUser = `-- name: GetPrayerByIdAndUser :many
SELECT id, prayer_title, prayer_request, category, related_scripture, created_at, updated_at, is_anonymous, user_id FROM prayers
WHERE id = $1 AND user_id = $2
ORDER BY created_at DESC
`

type GetPrayerByIdAndUserParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetPrayerByIdAndUser(ctx context.Context, arg GetPrayerByIdAndUserParams) ([]Prayer, error) {
	rows, err := q.db.QueryContext(ctx, getPrayerByIdAndUser, arg.ID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prayer
	for rows.Next() {
		var i Prayer
		if err := rows.Scan(
			&i.ID,
			&i.PrayerTitle,
			&i.PrayerRequest,
			&i.Category,
			&i.RelatedScripture,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAnonymous,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrayersByUser = `-- name: GetPrayersByUser :many
SELECT id, prayer_title, prayer_request, category, related_scripture, created_at, updated_at, is_anonymous, user_id FROM prayers
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetPrayersByUser(ctx context.Context, userID uuid.UUID) ([]Prayer, error) {
	rows, err := q.db.QueryContext(ctx, getPrayersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prayer
	for rows.Next() {
		var i Prayer
		if err := rows.Scan(
			&i.ID,
			&i.PrayerTitle,
			&i.PrayerRequest,
			&i.Category,
			&i.RelatedScripture,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAnonymous,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrayer = `-- name: UpdatePrayer :one
UPDATE prayers
SET prayer_title = COALESCE($2, prayer_title),
    prayer_request = COALESCE($3, prayer_request),
    category = COALESCE($4, category),
    related_scripture = COALESCE($5, related_scripture),
    is_anonymous = COALESCE($6, is_anonymous),
    updated_at = NOW()
WHERE id = $1
RETURNING id, prayer_title, prayer_request, category, related_scripture, created_at, updated_at, is_anonymous, user_id
`

type UpdatePrayerParams struct {
	ID               uuid.UUID
	PrayerTitle      string
	PrayerRequest    string
	Category         string
	RelatedScripture sql.NullString
	IsAnonymous      bool
}

func (q *Queries) UpdatePrayer(ctx context.Context, arg UpdatePrayerParams) (Prayer, error) {
	row := q.db.QueryRowContext(ctx, updatePrayer,
		arg.ID,
		arg.PrayerTitle,
		arg.PrayerRequest,
		arg.Category,
		arg.RelatedScripture,
		arg.IsAnonymous,
	)
	var i Prayer
	err := row.Scan(
		&i.ID,
		&i.PrayerTitle,
		&i.PrayerRequest,
		&i.Category,
		&i.RelatedScripture,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAnonymous,
		&i.UserID,
	)
	return i, err
}
